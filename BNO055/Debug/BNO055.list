
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002154  08002154  00012154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800217c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000110  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000011c  2000011c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d70e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b1d  00000000  00000000  0002d74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000787b  00000000  00000000  0002f267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  00036ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000050e4  00000000  00000000  00038058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000038f7  00000000  00000000  0003d13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00040a33  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001bc0  00000000  00000000  00040ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800213c 	.word	0x0800213c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800213c 	.word	0x0800213c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fcfc 	bl	8001f44 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000678:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800082c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000680:	4a68      	ldr	r2, [pc, #416]	; (8000824 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000682:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000830 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000686:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000688:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800068a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000690:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000694:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000698:	45b6      	cmp	lr, r6
 800069a:	f040 80ae 	bne.w	80007fa <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800069e:	684c      	ldr	r4, [r1, #4]
 80006a0:	f024 0710 	bic.w	r7, r4, #16
 80006a4:	2f02      	cmp	r7, #2
 80006a6:	d116      	bne.n	80006d6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006a8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006ac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006b4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006bc:	f04f 0c0f 	mov.w	ip, #15
 80006c0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006c4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006c8:	690d      	ldr	r5, [r1, #16]
 80006ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ce:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006d2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006d6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006da:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006dc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e0:	fa05 f50a 	lsl.w	r5, r5, sl
 80006e4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ea:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ee:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006fa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fe:	d811      	bhi.n	8000724 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000700:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000702:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000706:	68cf      	ldr	r7, [r1, #12]
 8000708:	fa07 fc0a 	lsl.w	ip, r7, sl
 800070c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000710:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000712:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000714:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000718:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800071c:	409f      	lsls	r7, r3
 800071e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000722:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000724:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000726:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000728:	688f      	ldr	r7, [r1, #8]
 800072a:	fa07 f70a 	lsl.w	r7, r7, sl
 800072e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000730:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000732:	00e5      	lsls	r5, r4, #3
 8000734:	d561      	bpl.n	80007fa <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	f04f 0b00 	mov.w	fp, #0
 800073a:	f8cd b00c 	str.w	fp, [sp, #12]
 800073e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000742:	4d39      	ldr	r5, [pc, #228]	; (8000828 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000748:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800074c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000750:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000754:	9703      	str	r7, [sp, #12]
 8000756:	9f03      	ldr	r7, [sp, #12]
 8000758:	f023 0703 	bic.w	r7, r3, #3
 800075c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000760:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000764:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000768:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000770:	f04f 0e0f 	mov.w	lr, #15
 8000774:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000778:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077e:	d043      	beq.n	8000808 <HAL_GPIO_Init+0x194>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	d041      	beq.n	800080c <HAL_GPIO_Init+0x198>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	d03f      	beq.n	8000810 <HAL_GPIO_Init+0x19c>
 8000790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000794:	42a8      	cmp	r0, r5
 8000796:	d03d      	beq.n	8000814 <HAL_GPIO_Init+0x1a0>
 8000798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079c:	42a8      	cmp	r0, r5
 800079e:	d03b      	beq.n	8000818 <HAL_GPIO_Init+0x1a4>
 80007a0:	4548      	cmp	r0, r9
 80007a2:	d03b      	beq.n	800081c <HAL_GPIO_Init+0x1a8>
 80007a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	d039      	beq.n	8000820 <HAL_GPIO_Init+0x1ac>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	bf14      	ite	ne
 80007b4:	2508      	movne	r5, #8
 80007b6:	2507      	moveq	r5, #7
 80007b8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007bc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007c0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007c2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007c4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ca:	bf0c      	ite	eq
 80007cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ce:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007d0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007d2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007d4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007d8:	bf0c      	ite	eq
 80007da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007dc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007de:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007e0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007e6:	bf0c      	ite	eq
 80007e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ea:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007ec:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007ee:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007f2:	bf54      	ite	pl
 80007f4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007f6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007f8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007fa:	3301      	adds	r3, #1
 80007fc:	2b10      	cmp	r3, #16
 80007fe:	f47f af44 	bne.w	800068a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000802:	b005      	add	sp, #20
 8000804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000808:	465d      	mov	r5, fp
 800080a:	e7d5      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 800080c:	2501      	movs	r5, #1
 800080e:	e7d3      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 8000810:	2502      	movs	r5, #2
 8000812:	e7d1      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 8000814:	2503      	movs	r5, #3
 8000816:	e7cf      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 8000818:	2504      	movs	r5, #4
 800081a:	e7cd      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 800081c:	2505      	movs	r5, #5
 800081e:	e7cb      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 8000820:	2506      	movs	r5, #6
 8000822:	e7c9      	b.n	80007b8 <HAL_GPIO_Init+0x144>
 8000824:	40013c00 	.word	0x40013c00
 8000828:	40020000 	.word	0x40020000
 800082c:	40023800 	.word	0x40023800
 8000830:	40021400 	.word	0x40021400

08000834 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000834:	6801      	ldr	r1, [r0, #0]
 8000836:	694b      	ldr	r3, [r1, #20]
 8000838:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	d010      	beq.n	8000864 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000842:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000846:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000848:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800084a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800084c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000850:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000854:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000856:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	4770      	bx	lr
  }
  return HAL_OK;
 8000864:	4618      	mov	r0, r3
}
 8000866:	4770      	bx	lr

08000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800086c:	4604      	mov	r4, r0
 800086e:	4617      	mov	r7, r2
 8000870:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000872:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000876:	b28e      	uxth	r6, r1
 8000878:	6825      	ldr	r5, [r4, #0]
 800087a:	f1b8 0f01 	cmp.w	r8, #1
 800087e:	bf0c      	ite	eq
 8000880:	696b      	ldreq	r3, [r5, #20]
 8000882:	69ab      	ldrne	r3, [r5, #24]
 8000884:	ea36 0303 	bics.w	r3, r6, r3
 8000888:	bf14      	ite	ne
 800088a:	2001      	movne	r0, #1
 800088c:	2000      	moveq	r0, #0
 800088e:	b908      	cbnz	r0, 8000894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000894:	696b      	ldr	r3, [r5, #20]
 8000896:	055a      	lsls	r2, r3, #21
 8000898:	d516      	bpl.n	80008c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008a2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80008a6:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80008a8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80008ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008b8:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008bc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80008be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80008c2:	2001      	movs	r0, #1
 80008c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	d0d5      	beq.n	8000878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008cc:	f7ff fe4e 	bl	800056c <HAL_GetTick>
 80008d0:	eba0 0009 	sub.w	r0, r0, r9
 80008d4:	4287      	cmp	r7, r0
 80008d6:	d301      	bcc.n	80008dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80008d8:	2f00      	cmp	r7, #0
 80008da:	d1cd      	bne.n	8000878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80008dc:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80008de:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80008e0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80008e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008ec:	f042 0220 	orr.w	r2, r2, #32
 80008f0:	e7e4      	b.n	80008bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080008f2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80008f2:	b570      	push	{r4, r5, r6, lr}
 80008f4:	4604      	mov	r4, r0
 80008f6:	460d      	mov	r5, r1
 80008f8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	075b      	lsls	r3, r3, #29
 8000900:	d501      	bpl.n	8000906 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000902:	2000      	movs	r0, #0
 8000904:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff ff94 	bl	8000834 <I2C_IsAcknowledgeFailed>
 800090c:	b9a8      	cbnz	r0, 800093a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800090e:	1c6a      	adds	r2, r5, #1
 8000910:	d0f3      	beq.n	80008fa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000912:	f7ff fe2b 	bl	800056c <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	4285      	cmp	r5, r0
 800091a:	d301      	bcc.n	8000920 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d1ec      	bne.n	80008fa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000920:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000922:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000924:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000926:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800092a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800092e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000930:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000934:	f042 0220 	orr.w	r2, r2, #32
 8000938:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800093a:	2001      	movs	r0, #1
}
 800093c:	bd70      	pop	{r4, r5, r6, pc}

0800093e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800093e:	b570      	push	{r4, r5, r6, lr}
 8000940:	4604      	mov	r4, r0
 8000942:	460d      	mov	r5, r1
 8000944:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000946:	6820      	ldr	r0, [r4, #0]
 8000948:	6943      	ldr	r3, [r0, #20]
 800094a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800094e:	d001      	beq.n	8000954 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
}
 8000952:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000954:	6942      	ldr	r2, [r0, #20]
 8000956:	06d2      	lsls	r2, r2, #27
 8000958:	d50e      	bpl.n	8000978 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800095a:	f06f 0210 	mvn.w	r2, #16
 800095e:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000960:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000962:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000964:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800096c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800096e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000974:	2001      	movs	r0, #1
 8000976:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000978:	f7ff fdf8 	bl	800056c <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	42a8      	cmp	r0, r5
 8000980:	d801      	bhi.n	8000986 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d1df      	bne.n	8000946 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000986:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000988:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800098a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800098c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000994:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000996:	f042 0220 	orr.w	r2, r2, #32
 800099a:	e7e8      	b.n	800096e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800099c <I2C_WaitOnFlagUntilTimeout>:
{
 800099c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	4604      	mov	r4, r0
 80009a4:	4690      	mov	r8, r2
 80009a6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009a8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80009ac:	b28d      	uxth	r5, r1
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	f1b9 0f01 	cmp.w	r9, #1
 80009b4:	bf0c      	ite	eq
 80009b6:	695b      	ldreq	r3, [r3, #20]
 80009b8:	699b      	ldrne	r3, [r3, #24]
 80009ba:	ea35 0303 	bics.w	r3, r5, r3
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	4543      	cmp	r3, r8
 80009c6:	d002      	beq.n	80009ce <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80009c8:	2000      	movs	r0, #0
}
 80009ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009ce:	1c7b      	adds	r3, r7, #1
 80009d0:	d0ed      	beq.n	80009ae <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d2:	f7ff fdcb 	bl	800056c <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	4287      	cmp	r7, r0
 80009da:	d301      	bcc.n	80009e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80009dc:	2f00      	cmp	r7, #0
 80009de:	d1e6      	bne.n	80009ae <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009e0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80009e2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009e4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80009e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009f4:	f042 0220 	orr.w	r2, r2, #32
 80009f8:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009fa:	2001      	movs	r0, #1
 80009fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a00 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	460d      	mov	r5, r1
 8000a06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	061b      	lsls	r3, r3, #24
 8000a0e:	d501      	bpl.n	8000a14 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a10:	2000      	movs	r0, #0
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ff0d 	bl	8000834 <I2C_IsAcknowledgeFailed>
 8000a1a:	b9a8      	cbnz	r0, 8000a48 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000a1c:	1c6a      	adds	r2, r5, #1
 8000a1e:	d0f3      	beq.n	8000a08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a20:	f7ff fda4 	bl	800056c <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	4285      	cmp	r5, r0
 8000a28:	d301      	bcc.n	8000a2e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d1ec      	bne.n	8000a08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a2e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a30:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a32:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a42:	f042 0220 	orr.w	r2, r2, #32
 8000a46:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
}
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}

08000a4c <HAL_I2C_Init>:
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000a4e:	4604      	mov	r4, r0
 8000a50:	b908      	cbnz	r0, 8000a56 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a5e:	b91b      	cbnz	r3, 8000a68 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000a64:	f001 fa8a 	bl	8001f7c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000a68:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a6a:	2324      	movs	r3, #36	; 0x24
 8000a6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000a78:	f000 fdba 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a7c:	6865      	ldr	r5, [r4, #4]
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_I2C_Init+0x138>)
 8000a80:	429d      	cmp	r5, r3
 8000a82:	d84d      	bhi.n	8000b20 <HAL_I2C_Init+0xd4>
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <HAL_I2C_Init+0x13c>)
 8000a86:	4298      	cmp	r0, r3
 8000a88:	d9e3      	bls.n	8000a52 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a8a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a8c:	493f      	ldr	r1, [pc, #252]	; (8000b8c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a8e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a90:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a9c:	6a13      	ldr	r3, [r2, #32]
 8000a9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa2:	3101      	adds	r1, #1
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000aa8:	69d1      	ldr	r1, [r2, #28]
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_I2C_Init+0x138>)
 8000aac:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ab0:	429d      	cmp	r5, r3
 8000ab2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ab6:	f100 30ff 	add.w	r0, r0, #4294967295
 8000aba:	d848      	bhi.n	8000b4e <HAL_I2C_Init+0x102>
 8000abc:	006d      	lsls	r5, r5, #1
 8000abe:	fbb0 f0f5 	udiv	r0, r0, r5
 8000ac2:	3001      	adds	r0, #1
 8000ac4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	bf38      	it	cc
 8000acc:	2304      	movcc	r3, #4
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	6a20      	ldr	r0, [r4, #32]
 8000ad6:	69e3      	ldr	r3, [r4, #28]
 8000ad8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000adc:	4303      	orrs	r3, r0
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ae2:	6891      	ldr	r1, [r2, #8]
 8000ae4:	68e0      	ldr	r0, [r4, #12]
 8000ae6:	6923      	ldr	r3, [r4, #16]
 8000ae8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000aec:	4303      	orrs	r3, r0
 8000aee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000af6:	68d1      	ldr	r1, [r2, #12]
 8000af8:	69a0      	ldr	r0, [r4, #24]
 8000afa:	6963      	ldr	r3, [r4, #20]
 8000afc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b00:	4303      	orrs	r3, r0
 8000b02:	430b      	orrs	r3, r1
 8000b04:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b10:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b12:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b18:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b1a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_I2C_Init+0x144>)
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d995      	bls.n	8000a52 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b26:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b28:	4e18      	ldr	r6, [pc, #96]	; (8000b8c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b2a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b2c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b34:	4333      	orrs	r3, r6
 8000b36:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b38:	6a13      	ldr	r3, [r2, #32]
 8000b3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b3e:	4371      	muls	r1, r6
 8000b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b44:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000b48:	fbb1 f1f6 	udiv	r1, r1, r6
 8000b4c:	e7a9      	b.n	8000aa2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b4e:	68a3      	ldr	r3, [r4, #8]
 8000b50:	b953      	cbnz	r3, 8000b68 <HAL_I2C_Init+0x11c>
 8000b52:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b56:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b60:	b16b      	cbz	r3, 8000b7e <HAL_I2C_Init+0x132>
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	e7b2      	b.n	8000ace <HAL_I2C_Init+0x82>
 8000b68:	2319      	movs	r3, #25
 8000b6a:	436b      	muls	r3, r5
 8000b6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b70:	1c43      	adds	r3, r0, #1
 8000b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b76:	b113      	cbz	r3, 8000b7e <HAL_I2C_Init+0x132>
 8000b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7c:	e7a7      	b.n	8000ace <HAL_I2C_Init+0x82>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e7a5      	b.n	8000ace <HAL_I2C_Init+0x82>
 8000b82:	bf00      	nop
 8000b84:	000186a0 	.word	0x000186a0
 8000b88:	001e847f 	.word	0x001e847f
 8000b8c:	000f4240 	.word	0x000f4240
 8000b90:	003d08ff 	.word	0x003d08ff

08000b94 <HAL_I2C_Master_Transmit>:
{
 8000b94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b98:	4604      	mov	r4, r0
 8000b9a:	461f      	mov	r7, r3
 8000b9c:	460d      	mov	r5, r1
 8000b9e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff fce4 	bl	800056c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ba4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ba8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000baa:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bac:	d004      	beq.n	8000bb8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000bae:	2502      	movs	r5, #2
}
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	b004      	add	sp, #16
 8000bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	2319      	movs	r3, #25
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4958      	ldr	r1, [pc, #352]	; (8000d20 <HAL_I2C_Master_Transmit+0x18c>)
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff feeb 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d1f1      	bne.n	8000bae <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000bca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d0ed      	beq.n	8000bae <HAL_I2C_Master_Transmit+0x1a>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000bde:	bf5e      	ittt	pl
 8000be0:	681a      	ldrpl	r2, [r3, #0]
 8000be2:	f042 0201 	orrpl.w	r2, r2, #1
 8000be6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bee:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000bf0:	2221      	movs	r2, #33	; 0x21
 8000bf2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000c00:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000c02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c04:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c06:	4a47      	ldr	r2, [pc, #284]	; (8000d24 <HAL_I2C_Master_Transmit+0x190>)
 8000c08:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000c0c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000c10:	2a08      	cmp	r2, #8
 8000c12:	d004      	beq.n	8000c1e <HAL_I2C_Master_Transmit+0x8a>
 8000c14:	2a01      	cmp	r2, #1
 8000c16:	d002      	beq.n	8000c1e <HAL_I2C_Master_Transmit+0x8a>
 8000c18:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000c1c:	d104      	bne.n	8000c28 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000c28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c2a:	2a12      	cmp	r2, #18
 8000c2c:	d0f7      	beq.n	8000c1e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c2e:	9600      	str	r6, [sp, #0]
 8000c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c32:	2200      	movs	r2, #0
 8000c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff feaf 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000c3e:	b108      	cbz	r0, 8000c44 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000c40:	2501      	movs	r5, #1
 8000c42:	e7b5      	b.n	8000bb0 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c44:	6923      	ldr	r3, [r4, #16]
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4c:	d113      	bne.n	8000c76 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c4e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000c52:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c54:	4633      	mov	r3, r6
 8000c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c58:	4933      	ldr	r1, [pc, #204]	; (8000d28 <HAL_I2C_Master_Transmit+0x194>)
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff fe04 	bl	8000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c60:	4605      	mov	r5, r0
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1ec      	bne.n	8000c40 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	9003      	str	r0, [sp, #12]
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	9203      	str	r2, [sp, #12]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	9303      	str	r3, [sp, #12]
 8000c72:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000c74:	e044      	b.n	8000d00 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000c76:	11eb      	asrs	r3, r5, #7
 8000c78:	f003 0306 	and.w	r3, r3, #6
 8000c7c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c80:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000c82:	492a      	ldr	r1, [pc, #168]	; (8000d2c <HAL_I2C_Master_Transmit+0x198>)
 8000c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c86:	4633      	mov	r3, r6
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff fded 	bl	8000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d1d6      	bne.n	8000c40 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	b2ed      	uxtb	r5, r5
 8000c96:	611d      	str	r5, [r3, #16]
 8000c98:	e7dc      	b.n	8000c54 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c9a:	4632      	mov	r2, r6
 8000c9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff feae 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ca4:	b140      	cbz	r0, 8000cb8 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ca8:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000caa:	bf01      	itttt	eq
 8000cac:	6822      	ldreq	r2, [r4, #0]
 8000cae:	6813      	ldreq	r3, [r2, #0]
 8000cb0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000cb4:	6013      	streq	r3, [r2, #0]
 8000cb6:	e7c3      	b.n	8000c40 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000cc2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000cc4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000cc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	b292      	uxth	r2, r2
 8000ccc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000cce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cd0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000cd2:	1e51      	subs	r1, r2, #1
 8000cd4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cd6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000cd8:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cda:	d50a      	bpl.n	8000cf2 <HAL_I2C_Master_Transmit+0x15e>
 8000cdc:	b149      	cbz	r1, 8000cf2 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000cde:	7859      	ldrb	r1, [r3, #1]
 8000ce0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000ce6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000cec:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000cee:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000cf0:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cf2:	4632      	mov	r2, r6
 8000cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f7ff fdfb 	bl	80008f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d1d2      	bne.n	8000ca6 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000d00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1c9      	bne.n	8000c9a <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d06:	6821      	ldr	r1, [r4, #0]
 8000d08:	680a      	ldr	r2, [r1, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d10:	2220      	movs	r2, #32
 8000d12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000d16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000d1e:	e747      	b.n	8000bb0 <HAL_I2C_Master_Transmit+0x1c>
 8000d20:	00100002 	.word	0x00100002
 8000d24:	ffff0000 	.word	0xffff0000
 8000d28:	00010002 	.word	0x00010002
 8000d2c:	00010008 	.word	0x00010008

08000d30 <HAL_I2C_Master_Receive>:
{
 8000d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d34:	4604      	mov	r4, r0
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	4698      	mov	r8, r3
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4691      	mov	r9, r2
 8000d3e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fc14 	bl	800056c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d44:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000d48:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000d4a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d4c:	d004      	beq.n	8000d58 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000d4e:	2702      	movs	r7, #2
}
 8000d50:	4638      	mov	r0, r7
 8000d52:	b009      	add	sp, #36	; 0x24
 8000d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d58:	9000      	str	r0, [sp, #0]
 8000d5a:	2319      	movs	r3, #25
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	49a6      	ldr	r1, [pc, #664]	; (8000ff8 <HAL_I2C_Master_Receive+0x2c8>)
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff fe1b 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d1f1      	bne.n	8000d4e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8000d6a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d0ed      	beq.n	8000d4e <HAL_I2C_Master_Receive+0x1e>
 8000d72:	2301      	movs	r3, #1
 8000d74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000d7e:	bf5e      	ittt	pl
 8000d80:	681a      	ldrpl	r2, [r3, #0]
 8000d82:	f042 0201 	orrpl.w	r2, r2, #1
 8000d86:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d8e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000d90:	2222      	movs	r2, #34	; 0x22
 8000d92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d96:	2210      	movs	r2, #16
 8000d98:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000da0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000da4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000da6:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000da8:	4a94      	ldr	r2, [pc, #592]	; (8000ffc <HAL_I2C_Master_Receive+0x2cc>)
 8000daa:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000dac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000dae:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8000db0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000db4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000db8:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000dba:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000dbc:	d004      	beq.n	8000dc8 <HAL_I2C_Master_Receive+0x98>
 8000dbe:	2a01      	cmp	r2, #1
 8000dc0:	d002      	beq.n	8000dc8 <HAL_I2C_Master_Receive+0x98>
 8000dc2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000dc6:	d104      	bne.n	8000dd2 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e002      	b.n	8000dd8 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000dd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000dd4:	2a11      	cmp	r2, #17
 8000dd6:	d0f7      	beq.n	8000dc8 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000dd8:	9500      	str	r5, [sp, #0]
 8000dda:	4633      	mov	r3, r6
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fdda 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000de8:	b108      	cbz	r0, 8000dee <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8000dea:	2701      	movs	r7, #1
 8000dec:	e7b0      	b.n	8000d50 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dee:	6923      	ldr	r3, [r4, #16]
 8000df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	d140      	bne.n	8000e7a <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000df8:	f047 0701 	orr.w	r7, r7, #1
 8000dfc:	b2ff      	uxtb	r7, r7
 8000dfe:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e00:	462b      	mov	r3, r5
 8000e02:	4632      	mov	r2, r6
 8000e04:	497e      	ldr	r1, [pc, #504]	; (8001000 <HAL_I2C_Master_Receive+0x2d0>)
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff fd2e 	bl	8000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d1eb      	bne.n	8000dea <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8000e12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d063      	beq.n	8000ee2 <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8000e1a:	2a01      	cmp	r2, #1
 8000e1c:	d174      	bne.n	8000f08 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e24:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e26:	9704      	str	r7, [sp, #16]
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	9204      	str	r2, [sp, #16]
 8000e2c:	699a      	ldr	r2, [r3, #24]
 8000e2e:	9204      	str	r2, [sp, #16]
 8000e30:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e38:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e3a:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001008 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 8000e3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d058      	beq.n	8000ef6 <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	f200 80ba 	bhi.w	8000fbe <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d177      	bne.n	8000f3e <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e4e:	462a      	mov	r2, r5
 8000e50:	4631      	mov	r1, r6
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff fd73 	bl	800093e <I2C_WaitOnRXNEFlagUntilTimeout>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d1c6      	bne.n	8000dea <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e60:	6912      	ldr	r2, [r2, #16]
 8000e62:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e66:	3301      	adds	r3, #1
 8000e68:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000e6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000e70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e72:	3b01      	subs	r3, #1
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000e78:	e7e1      	b.n	8000e3e <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e7a:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8000e7e:	f008 0806 	and.w	r8, r8, #6
 8000e82:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000e86:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e88:	495e      	ldr	r1, [pc, #376]	; (8001004 <HAL_I2C_Master_Receive+0x2d4>)
 8000e8a:	462b      	mov	r3, r5
 8000e8c:	4632      	mov	r2, r6
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fcea 	bl	8000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d1a8      	bne.n	8000dea <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e98:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e9a:	4959      	ldr	r1, [pc, #356]	; (8001000 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e9c:	b2ff      	uxtb	r7, r7
 8000e9e:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ea0:	4632      	mov	r2, r6
 8000ea2:	462b      	mov	r3, r5
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fcdf 	bl	8000868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d19c      	bne.n	8000dea <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	9007      	str	r0, [sp, #28]
 8000eb4:	6959      	ldr	r1, [r3, #20]
 8000eb6:	9107      	str	r1, [sp, #28]
 8000eb8:	6999      	ldr	r1, [r3, #24]
 8000eba:	9107      	str	r1, [sp, #28]
 8000ebc:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ec4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	9500      	str	r5, [sp, #0]
 8000eca:	4633      	mov	r3, r6
 8000ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ed0:	f7ff fd64 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d188      	bne.n	8000dea <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000ede:	6113      	str	r3, [r2, #16]
 8000ee0:	e78e      	b.n	8000e00 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ee2:	9703      	str	r7, [sp, #12]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	9203      	str	r2, [sp, #12]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	9203      	str	r2, [sp, #12]
 8000eec:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000f02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000f06:	e723      	b.n	8000d50 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8000f08:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f0a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000f0c:	d10d      	bne.n	8000f2a <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f1a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f1c:	9705      	str	r7, [sp, #20]
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	9205      	str	r2, [sp, #20]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	9305      	str	r3, [sp, #20]
 8000f26:	9b05      	ldr	r3, [sp, #20]
 8000f28:	e787      	b.n	8000e3a <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f2e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f30:	9706      	str	r7, [sp, #24]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	9206      	str	r2, [sp, #24]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	9306      	str	r3, [sp, #24]
 8000f3a:	9b06      	ldr	r3, [sp, #24]
 8000f3c:	e77d      	b.n	8000e3a <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 8000f3e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f40:	9500      	str	r5, [sp, #0]
 8000f42:	4633      	mov	r3, r6
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4641      	mov	r1, r8
 8000f4a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8000f4c:	d11a      	bne.n	8000f84 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f4e:	f7ff fd25 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	f47f af49 	bne.w	8000dea <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f60:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000f68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f6a:	1c53      	adds	r3, r2, #1
 8000f6c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000f6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000f74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f7c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	7053      	strb	r3, [r2, #1]
 8000f82:	e76f      	b.n	8000e64 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f84:	f7ff fd0a 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	f47f af2d 	bne.w	8000dea <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000f98:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8000fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fa2:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000fa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000faa:	3b01      	subs	r3, #1
 8000fac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fb6:	4641      	mov	r1, r8
 8000fb8:	4633      	mov	r3, r6
 8000fba:	4620      	mov	r0, r4
 8000fbc:	e7c7      	b.n	8000f4e <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff fcbb 	bl	800093e <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	f47f af0e 	bne.w	8000dea <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fce:	6822      	ldr	r2, [r4, #0]
 8000fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd2:	6912      	ldr	r2, [r2, #16]
 8000fd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8000fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fd8:	1c53      	adds	r3, r2, #1
 8000fda:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8000fdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	6959      	ldr	r1, [r3, #20]
 8000fee:	0749      	lsls	r1, r1, #29
 8000ff0:	f57f af25 	bpl.w	8000e3e <HAL_I2C_Master_Receive+0x10e>
 8000ff4:	e7c3      	b.n	8000f7e <HAL_I2C_Master_Receive+0x24e>
 8000ff6:	bf00      	nop
 8000ff8:	00100002 	.word	0x00100002
 8000ffc:	ffff0000 	.word	0xffff0000
 8001000:	00010002 	.word	0x00010002
 8001004:	00010008 	.word	0x00010008
 8001008:	00010004 	.word	0x00010004

0800100c <HAL_I2C_IsDeviceReady>:
{
 800100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001010:	4604      	mov	r4, r0
 8001012:	b085      	sub	sp, #20
 8001014:	4698      	mov	r8, r3
 8001016:	4689      	mov	r9, r1
 8001018:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800101a:	f7ff faa7 	bl	800056c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800101e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001022:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001024:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001026:	d003      	beq.n	8001030 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001028:	2002      	movs	r0, #2
}
 800102a:	b005      	add	sp, #20
 800102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001030:	9000      	str	r0, [sp, #0]
 8001032:	2319      	movs	r3, #25
 8001034:	2201      	movs	r2, #1
 8001036:	4948      	ldr	r1, [pc, #288]	; (8001158 <HAL_I2C_IsDeviceReady+0x14c>)
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fcaf 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 800103e:	2800      	cmp	r0, #0
 8001040:	d1f2      	bne.n	8001028 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001042:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d0ee      	beq.n	8001028 <HAL_I2C_IsDeviceReady+0x1c>
 800104a:	2301      	movs	r3, #1
 800104c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001050:	6823      	ldr	r3, [r4, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001052:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001158 <HAL_I2C_IsDeviceReady+0x14c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800105a:	bf5e      	ittt	pl
 800105c:	681a      	ldrpl	r2, [r3, #0]
 800105e:	f042 0201 	orrpl.w	r2, r2, #1
 8001062:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800106c:	2324      	movs	r3, #36	; 0x24
 800106e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001076:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800107a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800107c:	2701      	movs	r7, #1
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800107e:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800108c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001090:	9500      	str	r5, [sp, #0]
 8001092:	4643      	mov	r3, r8
 8001094:	2200      	movs	r2, #0
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fc80 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 800109c:	b108      	cbz	r0, 80010a2 <HAL_I2C_IsDeviceReady+0x96>
    return HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e7c3      	b.n	800102a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80010a8:	f7ff fa60 	bl	800056c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010b0:	695b      	ldr	r3, [r3, #20]
      tickstart = HAL_GetTick();
 80010b2:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010b8:	f3c3 2380 	ubfx	r3, r3, #10, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80010bc:	26a0      	movs	r6, #160	; 0xa0
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010be:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80010c2:	29a0      	cmp	r1, #160	; 0xa0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_IsDeviceReady+0xbe>
 80010c6:	b902      	cbnz	r2, 80010ca <HAL_I2C_IsDeviceReady+0xbe>
 80010c8:	b303      	cbz	r3, 800110c <HAL_I2C_IsDeviceReady+0x100>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80010ca:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80010cc:	2620      	movs	r6, #32
 80010ce:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010de:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80010e0:	d026      	beq.n	8001130 <HAL_I2C_IsDeviceReady+0x124>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e2:	2200      	movs	r2, #0
 80010e4:	9203      	str	r2, [sp, #12]
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	9203      	str	r2, [sp, #12]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010f0:	9500      	str	r5, [sp, #0]
 80010f2:	2319      	movs	r3, #25
 80010f4:	2201      	movs	r2, #1
 80010f6:	4918      	ldr	r1, [pc, #96]	; (8001158 <HAL_I2C_IsDeviceReady+0x14c>)
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fc4f 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d1cd      	bne.n	800109e <HAL_I2C_IsDeviceReady+0x92>
        hi2c->State = HAL_I2C_STATE_READY;
 8001102:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001106:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800110a:	e78e      	b.n	800102a <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800110c:	f7ff fa2e 	bl	800056c <HAL_GetTick>
 8001110:	1b40      	subs	r0, r0, r5
 8001112:	4580      	cmp	r8, r0
 8001114:	d302      	bcc.n	800111c <HAL_I2C_IsDeviceReady+0x110>
 8001116:	f1b8 0f00 	cmp.w	r8, #0
 800111a:	d101      	bne.n	8001120 <HAL_I2C_IsDeviceReady+0x114>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800111c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001124:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001126:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800112a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800112e:	e7c6      	b.n	80010be <HAL_I2C_IsDeviceReady+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001134:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001136:	4659      	mov	r1, fp
 8001138:	9500      	str	r5, [sp, #0]
 800113a:	2319      	movs	r3, #25
 800113c:	2201      	movs	r2, #1
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fc2c 	bl	800099c <I2C_WaitOnFlagUntilTimeout>
 8001144:	2800      	cmp	r0, #0
 8001146:	d1aa      	bne.n	800109e <HAL_I2C_IsDeviceReady+0x92>
      I2C_Trials++;
 8001148:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800114a:	4557      	cmp	r7, sl
 800114c:	d399      	bcc.n	8001082 <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 800114e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001152:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001156:	e7a2      	b.n	800109e <HAL_I2C_IsDeviceReady+0x92>
 8001158:	00100002 	.word	0x00100002

0800115c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	4604      	mov	r4, r0
 8001162:	b918      	cbnz	r0, 800116c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001164:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001166:	b002      	add	sp, #8
 8001168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116c:	6803      	ldr	r3, [r0, #0]
 800116e:	07dd      	lsls	r5, r3, #31
 8001170:	d410      	bmi.n	8001194 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	0798      	lsls	r0, r3, #30
 8001176:	d458      	bmi.n	800122a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	071a      	lsls	r2, r3, #28
 800117c:	f100 809a 	bmi.w	80012b4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	075b      	lsls	r3, r3, #29
 8001184:	f100 80b8 	bmi.w	80012f8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001188:	69a2      	ldr	r2, [r4, #24]
 800118a:	2a00      	cmp	r2, #0
 800118c:	f040 8119 	bne.w	80013c2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
 8001192:	e7e8      	b.n	8001166 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001194:	4ba6      	ldr	r3, [pc, #664]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	f002 020c 	and.w	r2, r2, #12
 800119c:	2a04      	cmp	r2, #4
 800119e:	d007      	beq.n	80011b0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	2a08      	cmp	r2, #8
 80011a8:	d10a      	bne.n	80011c0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	0259      	lsls	r1, r3, #9
 80011ae:	d507      	bpl.n	80011c0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4b9f      	ldr	r3, [pc, #636]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	039a      	lsls	r2, r3, #14
 80011b6:	d5dc      	bpl.n	8001172 <HAL_RCC_OscConfig+0x16>
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1d9      	bne.n	8001172 <HAL_RCC_OscConfig+0x16>
 80011be:	e7d1      	b.n	8001164 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	4d9b      	ldr	r5, [pc, #620]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d111      	bne.n	80011ee <HAL_RCC_OscConfig+0x92>
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011d2:	f7ff f9cb 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4d96      	ldr	r5, [pc, #600]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	682b      	ldr	r3, [r5, #0]
 80011dc:	039b      	lsls	r3, r3, #14
 80011de:	d4c8      	bmi.n	8001172 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff f9c4 	bl	800056c <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2864      	cmp	r0, #100	; 0x64
 80011e8:	d9f7      	bls.n	80011da <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011ea:	2003      	movs	r0, #3
 80011ec:	e7bb      	b.n	8001166 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f2:	d104      	bne.n	80011fe <HAL_RCC_OscConfig+0xa2>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fa:	602b      	str	r3, [r5, #0]
 80011fc:	e7e5      	b.n	80011ca <HAL_RCC_OscConfig+0x6e>
 80011fe:	682a      	ldr	r2, [r5, #0]
 8001200:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001204:	602a      	str	r2, [r5, #0]
 8001206:	682a      	ldr	r2, [r5, #0]
 8001208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800120c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1df      	bne.n	80011d2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001212:	f7ff f9ab 	bl	800056c <HAL_GetTick>
 8001216:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	039f      	lsls	r7, r3, #14
 800121c:	d5a9      	bpl.n	8001172 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121e:	f7ff f9a5 	bl	800056c <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2864      	cmp	r0, #100	; 0x64
 8001226:	d9f7      	bls.n	8001218 <HAL_RCC_OscConfig+0xbc>
 8001228:	e7df      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	4b81      	ldr	r3, [pc, #516]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f012 0f0c 	tst.w	r2, #12
 8001232:	d007      	beq.n	8001244 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2a08      	cmp	r2, #8
 800123c:	d111      	bne.n	8001262 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	025e      	lsls	r6, r3, #9
 8001242:	d40e      	bmi.n	8001262 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	0795      	lsls	r5, r2, #30
 800124a:	d502      	bpl.n	8001252 <HAL_RCC_OscConfig+0xf6>
 800124c:	68e2      	ldr	r2, [r4, #12]
 800124e:	2a01      	cmp	r2, #1
 8001250:	d188      	bne.n	8001164 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6921      	ldr	r1, [r4, #16]
 8001256:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800125a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800125e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e78a      	b.n	8001178 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001262:	68e2      	ldr	r2, [r4, #12]
 8001264:	4b73      	ldr	r3, [pc, #460]	; (8001434 <HAL_RCC_OscConfig+0x2d8>)
 8001266:	b1b2      	cbz	r2, 8001296 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800126c:	f7ff f97e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4d6f      	ldr	r5, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001272:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	0798      	lsls	r0, r3, #30
 8001278:	d507      	bpl.n	800128a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	6922      	ldr	r2, [r4, #16]
 800127e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001282:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001286:	602b      	str	r3, [r5, #0]
 8001288:	e776      	b.n	8001178 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff f96f 	bl	800056c <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	2802      	cmp	r0, #2
 8001292:	d9ef      	bls.n	8001274 <HAL_RCC_OscConfig+0x118>
 8001294:	e7a9      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001296:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001298:	f7ff f968 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129c:	4d64      	ldr	r5, [pc, #400]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800129e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	0799      	lsls	r1, r3, #30
 80012a4:	f57f af68 	bpl.w	8001178 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff f960 	bl	800056c <HAL_GetTick>
 80012ac:	1b80      	subs	r0, r0, r6
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d9f6      	bls.n	80012a0 <HAL_RCC_OscConfig+0x144>
 80012b2:	e79a      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b4:	6962      	ldr	r2, [r4, #20]
 80012b6:	4b60      	ldr	r3, [pc, #384]	; (8001438 <HAL_RCC_OscConfig+0x2dc>)
 80012b8:	b17a      	cbz	r2, 80012da <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012be:	f7ff f955 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4d5b      	ldr	r5, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c8:	079f      	lsls	r7, r3, #30
 80012ca:	f53f af59 	bmi.w	8001180 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff f94d 	bl	800056c <HAL_GetTick>
 80012d2:	1b80      	subs	r0, r0, r6
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x16a>
 80012d8:	e787      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012dc:	f7ff f946 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4d53      	ldr	r5, [pc, #332]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e6:	0798      	lsls	r0, r3, #30
 80012e8:	f57f af4a 	bpl.w	8001180 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff f93e 	bl	800056c <HAL_GetTick>
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	2802      	cmp	r0, #2
 80012f4:	d9f6      	bls.n	80012e4 <HAL_RCC_OscConfig+0x188>
 80012f6:	e778      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 80012fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001300:	d128      	bne.n	8001354 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001316:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	4d48      	ldr	r5, [pc, #288]	; (800143c <HAL_RCC_OscConfig+0x2e0>)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	05d9      	lsls	r1, r3, #23
 800131e:	d51b      	bpl.n	8001358 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001320:	68a3      	ldr	r3, [r4, #8]
 8001322:	4d43      	ldr	r5, [pc, #268]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 8001324:	2b01      	cmp	r3, #1
 8001326:	d127      	bne.n	8001378 <HAL_RCC_OscConfig+0x21c>
 8001328:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001330:	f7ff f91c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	4d3e      	ldr	r5, [pc, #248]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001336:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800133e:	079b      	lsls	r3, r3, #30
 8001340:	d539      	bpl.n	80013b6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001342:	2e00      	cmp	r6, #0
 8001344:	f43f af20 	beq.w	8001188 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001348:	4a39      	ldr	r2, [pc, #228]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 800134a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	e719      	b.n	8001188 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001354:	2600      	movs	r6, #0
 8001356:	e7df      	b.n	8001318 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001360:	f7ff f904 	bl	800056c <HAL_GetTick>
 8001364:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	05da      	lsls	r2, r3, #23
 800136a:	d4d9      	bmi.n	8001320 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136c:	f7ff f8fe 	bl	800056c <HAL_GetTick>
 8001370:	1bc0      	subs	r0, r0, r7
 8001372:	2802      	cmp	r0, #2
 8001374:	d9f7      	bls.n	8001366 <HAL_RCC_OscConfig+0x20a>
 8001376:	e738      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	2b05      	cmp	r3, #5
 800137a:	d104      	bne.n	8001386 <HAL_RCC_OscConfig+0x22a>
 800137c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	672b      	str	r3, [r5, #112]	; 0x70
 8001384:	e7d0      	b.n	8001328 <HAL_RCC_OscConfig+0x1cc>
 8001386:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	672a      	str	r2, [r5, #112]	; 0x70
 800138e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001390:	f022 0204 	bic.w	r2, r2, #4
 8001394:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ca      	bne.n	8001330 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800139a:	f7ff f8e7 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a6:	0798      	lsls	r0, r3, #30
 80013a8:	d5cb      	bpl.n	8001342 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff f8df 	bl	800056c <HAL_GetTick>
 80013ae:	1bc0      	subs	r0, r0, r7
 80013b0:	4540      	cmp	r0, r8
 80013b2:	d9f7      	bls.n	80013a4 <HAL_RCC_OscConfig+0x248>
 80013b4:	e719      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff f8d9 	bl	800056c <HAL_GetTick>
 80013ba:	1bc0      	subs	r0, r0, r7
 80013bc:	4540      	cmp	r0, r8
 80013be:	d9bd      	bls.n	800133c <HAL_RCC_OscConfig+0x1e0>
 80013c0:	e713      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c2:	4d1b      	ldr	r5, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
 80013c4:	68ab      	ldr	r3, [r5, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	f43f aeca 	beq.w	8001164 <HAL_RCC_OscConfig+0x8>
 80013d0:	4e1b      	ldr	r6, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x2e4>)
 80013d2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013d6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d8:	d134      	bne.n	8001444 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80013da:	f7ff f8c7 	bl	800056c <HAL_GetTick>
 80013de:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	0199      	lsls	r1, r3, #6
 80013e4:	d41e      	bmi.n	8001424 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e6:	6a22      	ldr	r2, [r4, #32]
 80013e8:	69e3      	ldr	r3, [r4, #28]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fa:	4c0d      	ldr	r4, [pc, #52]	; (8001430 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013fc:	0852      	lsrs	r2, r2, #1
 80013fe:	3a01      	subs	r2, #1
 8001400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001404:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001406:	2301      	movs	r3, #1
 8001408:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800140a:	f7ff f8af 	bl	800056c <HAL_GetTick>
 800140e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	019a      	lsls	r2, r3, #6
 8001414:	f53f aebc 	bmi.w	8001190 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f8a8 	bl	800056c <HAL_GetTick>
 800141c:	1b40      	subs	r0, r0, r5
 800141e:	2802      	cmp	r0, #2
 8001420:	d9f6      	bls.n	8001410 <HAL_RCC_OscConfig+0x2b4>
 8001422:	e6e2      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f8a2 	bl	800056c <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	2802      	cmp	r0, #2
 800142c:	d9d8      	bls.n	80013e0 <HAL_RCC_OscConfig+0x284>
 800142e:	e6dc      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
 800143c:	40007000 	.word	0x40007000
 8001440:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001444:	f7ff f892 	bl	800056c <HAL_GetTick>
 8001448:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	f57f ae9f 	bpl.w	8001190 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f88b 	bl	800056c <HAL_GetTick>
 8001456:	1b00      	subs	r0, r0, r4
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f6      	bls.n	800144a <HAL_RCC_OscConfig+0x2ee>
 800145c:	e6c5      	b.n	80011ea <HAL_RCC_OscConfig+0x8e>
 800145e:	bf00      	nop

08001460 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001460:	4913      	ldr	r1, [pc, #76]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001462:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001464:	688b      	ldr	r3, [r1, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x16>
 800146e:	2b08      	cmp	r3, #8
 8001470:	d003      	beq.n	800147a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001474:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001478:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800147a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001480:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001484:	bf14      	ite	ne
 8001486:	480c      	ldrne	r0, [pc, #48]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001488:	480a      	ldreq	r0, [pc, #40]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800148e:	bf18      	it	ne
 8001490:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001492:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	fba1 0100 	umull	r0, r1, r1, r0
 800149a:	f7fe fe95 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x50>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014a6:	3301      	adds	r3, #1
 80014a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ae:	bd08      	pop	{r3, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	017d7840 	.word	0x017d7840

080014bc <HAL_RCC_ClockConfig>:
{
 80014bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014c2:	4604      	mov	r4, r0
 80014c4:	b910      	cbnz	r0, 80014cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <HAL_RCC_ClockConfig+0x124>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f002 020f 	and.w	r2, r2, #15
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d328      	bcc.n	800152a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	6821      	ldr	r1, [r4, #0]
 80014da:	078f      	lsls	r7, r1, #30
 80014dc:	d42d      	bmi.n	800153a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	07c8      	lsls	r0, r1, #31
 80014e0:	d440      	bmi.n	8001564 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_ClockConfig+0x124>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f002 020f 	and.w	r2, r2, #15
 80014ea:	4295      	cmp	r5, r2
 80014ec:	d366      	bcc.n	80015bc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	0751      	lsls	r1, r2, #29
 80014f2:	d46c      	bmi.n	80015ce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	0713      	lsls	r3, r2, #28
 80014f6:	d507      	bpl.n	8001508 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
 80014fa:	6921      	ldr	r1, [r4, #16]
 80014fc:	6893      	ldr	r3, [r2, #8]
 80014fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001502:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001506:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001508:	f7ff ffaa 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_RCC_ClockConfig+0x12c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	40d8      	lsrs	r0, r3
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_ClockConfig+0x130>)
 800151c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f7fe ffda 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
 8001526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	b2ca      	uxtb	r2, r1
 800152c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	4299      	cmp	r1, r3
 8001536:	d1c6      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xa>
 8001538:	e7ce      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1c>
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001540:	bf1e      	ittt	ne
 8001542:	689a      	ldrne	r2, [r3, #8]
 8001544:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001548:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	bf42      	ittt	mi
 800154e:	689a      	ldrmi	r2, [r3, #8]
 8001550:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001554:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68a0      	ldr	r0, [r4, #8]
 800155a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800155e:	4302      	orrs	r2, r0
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	e7bc      	b.n	80014de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
 8001568:	2a01      	cmp	r2, #1
 800156a:	d11d      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	d0a8      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001574:	4e1b      	ldr	r6, [pc, #108]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
 8001576:	68b3      	ldr	r3, [r6, #8]
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001580:	f7fe fff4 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001588:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	68b3      	ldr	r3, [r6, #8]
 800158c:	6862      	ldr	r2, [r4, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001596:	d0a4      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7fe ffe8 	bl	800056c <HAL_GetTick>
 800159c:	1bc0      	subs	r0, r0, r7
 800159e:	4540      	cmp	r0, r8
 80015a0:	d9f3      	bls.n	800158a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
}
 80015a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a8:	1e91      	subs	r1, r2, #2
 80015aa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	d802      	bhi.n	80015b6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b4:	e7dd      	b.n	8001572 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	f013 0f02 	tst.w	r3, #2
 80015ba:	e7da      	b.n	8001572 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015bc:	b2ea      	uxtb	r2, r5
 80015be:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	429d      	cmp	r5, r3
 80015c8:	f47f af7d 	bne.w	80014c6 <HAL_RCC_ClockConfig+0xa>
 80015cc:	e78f      	b.n	80014ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ce:	4905      	ldr	r1, [pc, #20]	; (80015e4 <HAL_RCC_ClockConfig+0x128>)
 80015d0:	68e0      	ldr	r0, [r4, #12]
 80015d2:	688b      	ldr	r3, [r1, #8]
 80015d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015d8:	4303      	orrs	r3, r0
 80015da:	608b      	str	r3, [r1, #8]
 80015dc:	e78a      	b.n	80014f4 <HAL_RCC_ClockConfig+0x38>
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	08002154 	.word	0x08002154
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015fe:	6810      	ldr	r0, [r2, #0]
}
 8001600:	40d8      	lsrs	r0, r3
 8001602:	4770      	bx	lr
 8001604:	40023800 	.word	0x40023800
 8001608:	08002164 	.word	0x08002164
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	6803      	ldr	r3, [r0, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001620:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001622:	bf1e      	ittt	ne
 8001624:	681a      	ldrne	r2, [r3, #0]
 8001626:	f042 0201 	orrne.w	r2, r2, #1
 800162a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800162c:	2000      	movs	r0, #0
 800162e:	4770      	bx	lr

08001630 <HAL_TIM_OC_DelayElapsedCallback>:
 8001630:	4770      	bx	lr

08001632 <HAL_TIM_IC_CaptureCallback>:
 8001632:	4770      	bx	lr

08001634 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001634:	4770      	bx	lr

08001636 <HAL_TIM_TriggerCallback>:
 8001636:	4770      	bx	lr

08001638 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	0791      	lsls	r1, r2, #30
{
 800163e:	b510      	push	{r4, lr}
 8001640:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001642:	d50e      	bpl.n	8001662 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	0792      	lsls	r2, r2, #30
 8001648:	d50b      	bpl.n	8001662 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800164a:	f06f 0202 	mvn.w	r2, #2
 800164e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001650:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001652:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001654:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001656:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001658:	d077      	beq.n	800174a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800165a:	f7ff ffea 	bl	8001632 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165e:	2300      	movs	r3, #0
 8001660:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	0750      	lsls	r0, r2, #29
 8001668:	d510      	bpl.n	800168c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	0751      	lsls	r1, r2, #29
 800166e:	d50d      	bpl.n	800168c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001670:	f06f 0204 	mvn.w	r2, #4
 8001674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001676:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001678:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800167a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800167e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001680:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001682:	d068      	beq.n	8001756 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001684:	f7ff ffd5 	bl	8001632 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001688:	2300      	movs	r3, #0
 800168a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	0712      	lsls	r2, r2, #28
 8001692:	d50f      	bpl.n	80016b4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	0710      	lsls	r0, r2, #28
 8001698:	d50c      	bpl.n	80016b4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800169a:	f06f 0208 	mvn.w	r2, #8
 800169e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016a0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016a2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016a4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016a6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016aa:	d05a      	beq.n	8001762 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80016ac:	f7ff ffc1 	bl	8001632 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b0:	2300      	movs	r3, #0
 80016b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	06d2      	lsls	r2, r2, #27
 80016ba:	d510      	bpl.n	80016de <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	06d0      	lsls	r0, r2, #27
 80016c0:	d50d      	bpl.n	80016de <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c2:	f06f 0210 	mvn.w	r2, #16
 80016c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ca:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016cc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016d4:	d04b      	beq.n	800176e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	f7ff ffac 	bl	8001632 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	2300      	movs	r3, #0
 80016dc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	07d1      	lsls	r1, r2, #31
 80016e4:	d508      	bpl.n	80016f8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	07d2      	lsls	r2, r2, #31
 80016ea:	d505      	bpl.n	80016f8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016ec:	f06f 0201 	mvn.w	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f000 fb62 	bl	8001dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	0610      	lsls	r0, r2, #24
 80016fe:	d508      	bpl.n	8001712 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	0611      	lsls	r1, r2, #24
 8001704:	d505      	bpl.n	8001712 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001706:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800170a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800170c:	4620      	mov	r0, r4
 800170e:	f000 f972 	bl	80019f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	0652      	lsls	r2, r2, #25
 8001718:	d508      	bpl.n	800172c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	0650      	lsls	r0, r2, #25
 800171e:	d505      	bpl.n	800172c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff85 	bl	8001636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	0691      	lsls	r1, r2, #26
 8001732:	d522      	bpl.n	800177a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	0692      	lsls	r2, r2, #26
 8001738:	d51f      	bpl.n	800177a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800173a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800173e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001740:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001746:	f000 b955 	b.w	80019f4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	f7ff ff71 	bl	8001630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ff70 	bl	8001634 <HAL_TIM_PWM_PulseFinishedCallback>
 8001754:	e783      	b.n	800165e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	f7ff ff6b 	bl	8001630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff ff6a 	bl	8001634 <HAL_TIM_PWM_PulseFinishedCallback>
 8001760:	e792      	b.n	8001688 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001762:	f7ff ff65 	bl	8001630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff ff64 	bl	8001634 <HAL_TIM_PWM_PulseFinishedCallback>
 800176c:	e7a0      	b.n	80016b0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176e:	f7ff ff5f 	bl	8001630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff ff5e 	bl	8001634 <HAL_TIM_PWM_PulseFinishedCallback>
 8001778:	e7af      	b.n	80016da <HAL_TIM_IRQHandler+0xa2>
 800177a:	bd10      	pop	{r4, pc}

0800177c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800177e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001780:	4290      	cmp	r0, r2
 8001782:	d012      	beq.n	80017aa <TIM_Base_SetConfig+0x2e>
 8001784:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001788:	d00f      	beq.n	80017aa <TIM_Base_SetConfig+0x2e>
 800178a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800178e:	4290      	cmp	r0, r2
 8001790:	d00b      	beq.n	80017aa <TIM_Base_SetConfig+0x2e>
 8001792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001796:	4290      	cmp	r0, r2
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0x2e>
 800179a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179e:	4290      	cmp	r0, r2
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0x2e>
 80017a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017a6:	4290      	cmp	r0, r2
 80017a8:	d119      	bne.n	80017de <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <TIM_Base_SetConfig+0xc4>)
 80017b4:	4290      	cmp	r0, r2
 80017b6:	d029      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017bc:	d026      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017c2:	4290      	cmp	r0, r2
 80017c4:	d022      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ca:	4290      	cmp	r0, r2
 80017cc:	d01e      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d01a      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017da:	4290      	cmp	r0, r2
 80017dc:	d016      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <TIM_Base_SetConfig+0xc8>)
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d013      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e8:	4290      	cmp	r0, r2
 80017ea:	d00f      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f0:	4290      	cmp	r0, r2
 80017f2:	d00b      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017f4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017f8:	4290      	cmp	r0, r2
 80017fa:	d007      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 80017fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001800:	4290      	cmp	r0, r2
 8001802:	d003      	beq.n	800180c <TIM_Base_SetConfig+0x90>
 8001804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001808:	4290      	cmp	r0, r2
 800180a:	d103      	bne.n	8001814 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800180e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001812:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001814:	694a      	ldr	r2, [r1, #20]
 8001816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800181a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800181c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800181e:	688b      	ldr	r3, [r1, #8]
 8001820:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001822:	680b      	ldr	r3, [r1, #0]
 8001824:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <TIM_Base_SetConfig+0xc4>)
 8001828:	4298      	cmp	r0, r3
 800182a:	d003      	beq.n	8001834 <TIM_Base_SetConfig+0xb8>
 800182c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001830:	4298      	cmp	r0, r3
 8001832:	d101      	bne.n	8001838 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001834:	690b      	ldr	r3, [r1, #16]
 8001836:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001838:	2301      	movs	r3, #1
 800183a:	6143      	str	r3, [r0, #20]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40010000 	.word	0x40010000
 8001844:	40014000 	.word	0x40014000

08001848 <HAL_TIM_Base_Init>:
{
 8001848:	b510      	push	{r4, lr}
  if (htim == NULL)
 800184a:	4604      	mov	r4, r0
 800184c:	b1a0      	cbz	r0, 8001878 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800184e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001852:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001856:	b91b      	cbnz	r3, 8001860 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001858:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800185c:	f000 fbc6 	bl	8001fec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001866:	6820      	ldr	r0, [r4, #0]
 8001868:	1d21      	adds	r1, r4, #4
 800186a:	f7ff ff87 	bl	800177c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800186e:	2301      	movs	r3, #1
 8001870:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
 8001876:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
}
 800187a:	bd10      	pop	{r4, pc}

0800187c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800187c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800187e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001880:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001882:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001886:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800188a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800188c:	6083      	str	r3, [r0, #8]
 800188e:	bd10      	pop	{r4, pc}

08001890 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001890:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001894:	2b01      	cmp	r3, #1
{
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	4604      	mov	r4, r0
 800189a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800189e:	d019      	beq.n	80018d4 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80018a0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80018a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80018a6:	2301      	movs	r3, #1
 80018a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80018ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018b6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80018b8:	680b      	ldr	r3, [r1, #0]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d065      	beq.n	800198a <HAL_TIM_ConfigClockSource+0xfa>
 80018be:	d815      	bhi.n	80018ec <HAL_TIM_ConfigClockSource+0x5c>
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d00c      	beq.n	80018de <HAL_TIM_ConfigClockSource+0x4e>
 80018c4:	d807      	bhi.n	80018d6 <HAL_TIM_ConfigClockSource+0x46>
 80018c6:	b153      	cbz	r3, 80018de <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80018c8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80018d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d001      	beq.n	80018de <HAL_TIM_ConfigClockSource+0x4e>
 80018da:	2b30      	cmp	r3, #48	; 0x30
 80018dc:	d1f4      	bne.n	80018c8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80018de:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018e0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80018e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018e8:	4313      	orrs	r3, r2
 80018ea:	e01a      	b.n	8001922 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80018ec:	2b60      	cmp	r3, #96	; 0x60
 80018ee:	d034      	beq.n	800195a <HAL_TIM_ConfigClockSource+0xca>
 80018f0:	d819      	bhi.n	8001926 <HAL_TIM_ConfigClockSource+0x96>
 80018f2:	2b50      	cmp	r3, #80	; 0x50
 80018f4:	d1e8      	bne.n	80018c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018f6:	684a      	ldr	r2, [r1, #4]
 80018f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80018fa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018fc:	6a05      	ldr	r5, [r0, #32]
 80018fe:	f025 0501 	bic.w	r5, r5, #1
 8001902:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001904:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001906:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800190a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800190e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001912:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001914:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001916:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001918:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800191a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800191e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001922:	6083      	str	r3, [r0, #8]
 8001924:	e7d0      	b.n	80018c8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001926:	2b70      	cmp	r3, #112	; 0x70
 8001928:	d00c      	beq.n	8001944 <HAL_TIM_ConfigClockSource+0xb4>
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d1cb      	bne.n	80018c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001930:	68cb      	ldr	r3, [r1, #12]
 8001932:	684a      	ldr	r2, [r1, #4]
 8001934:	6889      	ldr	r1, [r1, #8]
 8001936:	f7ff ffa1 	bl	800187c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	6893      	ldr	r3, [r2, #8]
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	e008      	b.n	8001956 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001944:	68cb      	ldr	r3, [r1, #12]
 8001946:	684a      	ldr	r2, [r1, #4]
 8001948:	6889      	ldr	r1, [r1, #8]
 800194a:	f7ff ff97 	bl	800187c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001956:	6093      	str	r3, [r2, #8]
      break;
 8001958:	e7b6      	b.n	80018c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800195a:	684d      	ldr	r5, [r1, #4]
 800195c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800195e:	6a01      	ldr	r1, [r0, #32]
 8001960:	f021 0110 	bic.w	r1, r1, #16
 8001964:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001966:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001968:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800196a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800196e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001972:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001976:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800197a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800197c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800197e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001984:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001988:	e7cb      	b.n	8001922 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800198a:	684a      	ldr	r2, [r1, #4]
 800198c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800198e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001990:	6a05      	ldr	r5, [r0, #32]
 8001992:	f025 0501 	bic.w	r5, r5, #1
 8001996:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001998:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800199a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800199e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019a2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80019a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80019ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019b2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80019b6:	e7b4      	b.n	8001922 <HAL_TIM_ConfigClockSource+0x92>

080019b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
{
 80019be:	b530      	push	{r4, r5, lr}
 80019c0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80019c4:	d014      	beq.n	80019f0 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019c6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80019cc:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019ce:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019d0:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019d2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80019d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80019d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019dc:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019de:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019e0:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019e2:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80019f0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80019f2:	bd30      	pop	{r4, r5, pc}

080019f4 <HAL_TIMEx_CommutCallback>:
 80019f4:	4770      	bx	lr

080019f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019f6:	4770      	bx	lr

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b530      	push	{r4, r5, lr}
 80019fa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fc:	2230      	movs	r2, #48	; 0x30
 80019fe:	2100      	movs	r1, #0
 8001a00:	a808      	add	r0, sp, #32
 8001a02:	f000 fb93 	bl	800212c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a06:	2100      	movs	r1, #0
 8001a08:	2214      	movs	r2, #20
 8001a0a:	a803      	add	r0, sp, #12
 8001a0c:	f000 fb8e 	bl	800212c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2400      	movs	r4, #0
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <SystemClock_Config+0x90>)
 8001a14:	9401      	str	r4, [sp, #4]
 8001a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <SystemClock_Config+0x94>)
 8001a2a:	9402      	str	r4, [sp, #8]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a46:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a4c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a4e:	2319      	movs	r3, #25
 8001a50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a52:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a60:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a62:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f7ff fb7a 	bl	800115c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	230f      	movs	r3, #15
 8001a6a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a70:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a72:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a78:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a7e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a80:	f7ff fd1c 	bl	80014bc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001a84:	b015      	add	sp, #84	; 0x54
 8001a86:	bd30      	pop	{r4, r5, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <ini_BNO055>:

}

/* USER CODE BEGIN 4 */
uint8_t ini_BNO055(void)
{
 8001a90:	b530      	push	{r4, r5, lr}
	uint8_t IS_OK = 0;
	uint8_t Buff_aux[10]; //Leitura das ID dos elementos do Sensor
	if (HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR1 << 1, 1, 100)
 8001a92:	2364      	movs	r3, #100	; 0x64
{
 8001a94:	b087      	sub	sp, #28
	if (HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR1 << 1, 1, 100)
 8001a96:	2201      	movs	r2, #1
 8001a98:	2150      	movs	r1, #80	; 0x50
 8001a9a:	481d      	ldr	r0, [pc, #116]	; (8001b10 <ini_BNO055+0x80>)
 8001a9c:	f7ff fab6 	bl	800100c <HAL_I2C_IsDeviceReady>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	bb90      	cbnz	r0, 8001b0a <ini_BNO055+0x7a>
		//HAL_Delay(100);

		//mudar para a pagina 0 dos registradores
		Buff_aux[0] = BNO055_PAGE_ID_ADDR; //endereco
		Buff_aux[1] = BNO055_PAGE_ZERO; //dado
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, Buff_aux, 2,
 8001aa4:	2514      	movs	r5, #20
		Buff_aux[0] = BNO055_PAGE_ID_ADDR; //endereco
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	f88d 300c 	strb.w	r3, [sp, #12]
		Buff_aux[1] = BNO055_PAGE_ZERO; //dado
 8001aac:	f88d 000d 	strb.w	r0, [sp, #13]
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, Buff_aux, 2,
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	aa03      	add	r2, sp, #12
 8001ab4:	2150      	movs	r1, #80	; 0x50
 8001ab6:	9500      	str	r5, [sp, #0]
 8001ab8:	4815      	ldr	r0, [pc, #84]	; (8001b10 <ini_BNO055+0x80>)
 8001aba:	f7ff f86b 	bl	8000b94 <HAL_I2C_Master_Transmit>
				TIMEOUT);

		//Leitura dos ID do dispositivo
		Buff_aux[0] = BNO055_CHIP_ID_ADDR;
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, Buff_aux, 1,
 8001abe:	2301      	movs	r3, #1
 8001ac0:	aa03      	add	r2, sp, #12
 8001ac2:	2150      	movs	r1, #80	; 0x50
 8001ac4:	9500      	str	r5, [sp, #0]
 8001ac6:	4812      	ldr	r0, [pc, #72]	; (8001b10 <ini_BNO055+0x80>)
		Buff_aux[0] = BNO055_CHIP_ID_ADDR;
 8001ac8:	f88d 400c 	strb.w	r4, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, Buff_aux, 1,
 8001acc:	f7ff f862 	bl	8000b94 <HAL_I2C_Master_Transmit>
				TIMEOUT);
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &Buff_aux[1], 4,
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	9500      	str	r5, [sp, #0]
 8001ad4:	f10d 020d 	add.w	r2, sp, #13
 8001ad8:	2150      	movs	r1, #80	; 0x50
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <ini_BNO055+0x80>)
 8001adc:	f7ff f928 	bl	8000d30 <HAL_I2C_Master_Receive>
				TIMEOUT);
		//BNO_ID= 0xA0 ACC_I=0xFB MAG_ID=0x32 GYRO_ID=0x0F
		if (Buff_aux[1] == 0xA0 && Buff_aux[2] == 0xFB && Buff_aux[3] == 0x32
 8001ae0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001ae4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ae6:	d10d      	bne.n	8001b04 <ini_BNO055+0x74>
 8001ae8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001aec:	2bfb      	cmp	r3, #251	; 0xfb
 8001aee:	d109      	bne.n	8001b04 <ini_BNO055+0x74>
 8001af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001af4:	2b32      	cmp	r3, #50	; 0x32
 8001af6:	d105      	bne.n	8001b04 <ini_BNO055+0x74>
				&& Buff_aux[4] == 0x0F) {
 8001af8:	f89d 4010 	ldrb.w	r4, [sp, #16]
	uint8_t IS_OK = 0;
 8001afc:	f1a4 030f 	sub.w	r3, r4, #15
 8001b00:	425c      	negs	r4, r3
 8001b02:	415c      	adcs	r4, r3
			IS_OK = 1;
		}

	}
	return IS_OK;
}
 8001b04:	4620      	mov	r0, r4
 8001b06:	b007      	add	sp, #28
 8001b08:	bd30      	pop	{r4, r5, pc}
	uint8_t IS_OK = 0;
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	e7fa      	b.n	8001b04 <ini_BNO055+0x74>
 8001b0e:	bf00      	nop
 8001b10:	20000060 	.word	0x20000060

08001b14 <setup_BNO055>:

void setup_BNO055(void)
{
 8001b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while(ini_BNO055()!=1){}
 8001b18:	f7ff ffba 	bl	8001a90 <ini_BNO055>
 8001b1c:	2801      	cmp	r0, #1
 8001b1e:	d1fb      	bne.n	8001b18 <setup_BNO055+0x4>

	//configurar as condi��es de opera��o do BNO055
	//		  N�o precisa, por padr�o j� vem configurado dessa forma.
	//power mode ->Normal
	BufferI2C[0] = BNO055_PWR_MODE_ADDR;		 //endere�o
 8001b20:	4c74      	ldr	r4, [pc, #464]	; (8001cf4 <setup_BNO055+0x1e0>)
	BufferI2C[1] = BNO055_POWER_MODE_NORMAL;		 //dado
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b22:	4875      	ldr	r0, [pc, #468]	; (8001cf8 <setup_BNO055+0x1e4>)
 8001b24:	2614      	movs	r6, #20
	BufferI2C[0] = BNO055_PWR_MODE_ADDR;		 //endere�o
 8001b26:	233e      	movs	r3, #62	; 0x3e
	BufferI2C[1] = BNO055_POWER_MODE_NORMAL;		 //dado
 8001b28:	2500      	movs	r5, #0
	BufferI2C[0] = BNO055_PWR_MODE_ADDR;		 //endere�o
 8001b2a:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	2302      	movs	r3, #2
 8001b30:	2150      	movs	r1, #80	; 0x50
 8001b32:	9600      	str	r6, [sp, #0]
	BufferI2C[1] = BNO055_POWER_MODE_NORMAL;		 //dado
 8001b34:	7065      	strb	r5, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b36:	f7ff f82d 	bl	8000b94 <HAL_I2C_Master_Transmit>

	//Setar o modo de opera��o para configmode
	BufferI2C[0] = BNO055_OPR_MODE_ADDR;		 //endere�o
 8001b3a:	233d      	movs	r3, #61	; 0x3d
 8001b3c:	7023      	strb	r3, [r4, #0]
	BufferI2C[1] = BNO055_OPERATION_MODE_CONFIG;//dado do modo de opera��o
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b3e:	4622      	mov	r2, r4
 8001b40:	2302      	movs	r3, #2
 8001b42:	2150      	movs	r1, #80	; 0x50
 8001b44:	9600      	str	r6, [sp, #0]
 8001b46:	486c      	ldr	r0, [pc, #432]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[1] = BNO055_OPERATION_MODE_CONFIG;//dado do modo de opera��o
 8001b48:	7065      	strb	r5, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b4a:	f7ff f823 	bl	8000b94 <HAL_I2C_Master_Transmit>

	//Disparar o trigger do self test e setar o oscilador externo, e resetar BNO
	BufferI2C[0] = BNO055_SYS_TRIGGER_ADDR; //endere�o
 8001b4e:	233f      	movs	r3, #63	; 0x3f
 8001b50:	7023      	strb	r3, [r4, #0]
	BufferI2C[1] = 0b11100001; //dado do modo de opera��o
 8001b52:	23e1      	movs	r3, #225	; 0xe1
 8001b54:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b56:	4622      	mov	r2, r4
 8001b58:	2302      	movs	r3, #2
 8001b5a:	2150      	movs	r1, #80	; 0x50
 8001b5c:	9600      	str	r6, [sp, #0]
 8001b5e:	4866      	ldr	r0, [pc, #408]	; (8001cf8 <setup_BNO055+0x1e4>)
 8001b60:	f7ff f818 	bl	8000b94 <HAL_I2C_Master_Transmit>

	HAL_Delay(700); // no datasheet diz que demora 650ms
 8001b64:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b68:	f7fe fd06 	bl	8000578 <HAL_Delay>
	//		TIMEOUT);
	//
	//		HAL_Delay(700); // no datasheet diz que demora 650ms

	//Ler status do do selftest
	BufferI2C[0] = BNO055_SELFTEST_RESULT_ADDR; //Endere�o do status da calibra��o
 8001b6c:	2336      	movs	r3, #54	; 0x36
	BufferI2C[1] = 0; // status inicial do self-test
 8001b6e:	7065      	strb	r5, [r4, #1]
	while ((BufferI2C[1] & 0xF) != 0xF) //enquanto n�o passar no teste, fica preso aqui
	{
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001b70:	4d61      	ldr	r5, [pc, #388]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_SELFTEST_RESULT_ADDR; //Endere�o do status da calibra��o
 8001b72:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001b74:	4627      	mov	r7, r4
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &BufferI2C[1], 1, TIMEOUT);
 8001b76:	f104 0801 	add.w	r8, r4, #1
	while ((BufferI2C[1] & 0xF) != 0xF) //enquanto n�o passar no teste, fica preso aqui
 8001b7a:	7863      	ldrb	r3, [r4, #1]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	f040 8091 	bne.w	8001ca8 <setup_BNO055+0x194>
	}

	//mudar para a p�gina 1 de configura��o de registradores
	BufferI2C[0] = BNO055_PAGE_ID_ADDR; //endere�o
	BufferI2C[1] = BNO055_PAGE_ONE; //dado
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b86:	2514      	movs	r5, #20
	BufferI2C[1] = BNO055_PAGE_ONE; //dado
 8001b88:	2701      	movs	r7, #1
	BufferI2C[0] = BNO055_PAGE_ID_ADDR; //endere�o
 8001b8a:	f04f 0807 	mov.w	r8, #7
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b8e:	9500      	str	r5, [sp, #0]
 8001b90:	2302      	movs	r3, #2
 8001b92:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001b94:	4858      	ldr	r0, [pc, #352]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_PAGE_ID_ADDR; //endere�o
 8001b96:	f884 8000 	strb.w	r8, [r4]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b9a:	2150      	movs	r1, #80	; 0x50
	BufferI2C[1] = BNO055_PAGE_ONE; //dado
 8001b9c:	7067      	strb	r7, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001b9e:	f7fe fff9 	bl	8000b94 <HAL_I2C_Master_Transmit>

	//configura aceler�metro
	BufferI2C[0] = BNO055_ACCEL_CONFIG_ADDR; //endere�o
 8001ba2:	2308      	movs	r3, #8
	BufferI2C[1] = 0b00000000; //000-normal_op_mode;000- 7Hz freq corte; 00 8G (Depois testar com 4G , 8G e 16G)
 8001ba4:	2600      	movs	r6, #0
	BufferI2C[0] = BNO055_ACCEL_CONFIG_ADDR; //endere�o
 8001ba6:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001ba8:	9500      	str	r5, [sp, #0]
 8001baa:	2302      	movs	r3, #2
 8001bac:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001bae:	4852      	ldr	r0, [pc, #328]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[1] = 0b00000000; //000-normal_op_mode;000- 7Hz freq corte; 00 8G (Depois testar com 4G , 8G e 16G)
 8001bb0:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001bb2:	2150      	movs	r1, #80	; 0x50
 8001bb4:	f7fe ffee 	bl	8000b94 <HAL_I2C_Master_Transmit>
	 */

	//mudar para a p�gina 0 dos registradores
	BufferI2C[0] = BNO055_PAGE_ID_ADDR; //endere�o
	BufferI2C[1] = BNO055_PAGE_ZERO; //dado
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001bb8:	9500      	str	r5, [sp, #0]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001bbe:	484e      	ldr	r0, [pc, #312]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_PAGE_ID_ADDR; //endere�o
 8001bc0:	f884 8000 	strb.w	r8, [r4]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001bc4:	2150      	movs	r1, #80	; 0x50
	BufferI2C[1] = BNO055_PAGE_ZERO; //dado
 8001bc6:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001bc8:	f7fe ffe4 	bl	8000b94 <HAL_I2C_Master_Transmit>

	//configura unidades de medida
	BufferI2C[0] = BNO055_UNIT_SEL_ADDR; //endere�o
 8001bcc:	233b      	movs	r3, #59	; 0x3b
 8001bce:	7023      	strb	r3, [r4, #0]
	BufferI2C[1] = 0b00000110; //acel m/s^2; gyro rad/s; euler rad/s; Temp Celcius
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001bd4:	9500      	str	r5, [sp, #0]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001bda:	4847      	ldr	r0, [pc, #284]	; (8001cf8 <setup_BNO055+0x1e4>)
 8001bdc:	2150      	movs	r1, #80	; 0x50
 8001bde:	f7fe ffd9 	bl	8000b94 <HAL_I2C_Master_Transmit>

	//carrega a m�dia de 9 calibra��es  para ver se depois vai r�pido
	BufferI2C[0] = BNO055_ACCEL_OFFSET_X_LSB_ADDR; //endere�o
	BufferI2C[1] = 236; //ACC_OFFSET_X_LSB
 8001be2:	22ec      	movs	r2, #236	; 0xec
	BufferI2C[0] = BNO055_ACCEL_OFFSET_X_LSB_ADDR; //endere�o
 8001be4:	2355      	movs	r3, #85	; 0x55
 8001be6:	7023      	strb	r3, [r4, #0]
	BufferI2C[1] = 236; //ACC_OFFSET_X_LSB
 8001be8:	7062      	strb	r2, [r4, #1]
	BufferI2C[2] = 255; //ACC_OFFSET_X_MSB
 8001bea:	23ff      	movs	r3, #255	; 0xff
	BufferI2C[3] = 230; //ACC_OFFSET_Y_LSB
	BufferI2C[4] = 255; //ACC_OFFSET_Y_MSB
	BufferI2C[5] = 236; //ACC_OFFSET_Z_LSB
 8001bec:	7162      	strb	r2, [r4, #5]
	BufferI2C[6] = 255; //ACC_OFFSET_Z_MSB
	BufferI2C[7] = 100; //MAG_OFFSET_X_LSB
 8001bee:	2264      	movs	r2, #100	; 0x64
	BufferI2C[2] = 255; //ACC_OFFSET_X_MSB
 8001bf0:	70a3      	strb	r3, [r4, #2]
	BufferI2C[4] = 255; //ACC_OFFSET_Y_MSB
 8001bf2:	7123      	strb	r3, [r4, #4]
	BufferI2C[6] = 255; //ACC_OFFSET_Z_MSB
 8001bf4:	71a3      	strb	r3, [r4, #6]
	BufferI2C[7] = 100; //MAG_OFFSET_X_LSB
 8001bf6:	71e2      	strb	r2, [r4, #7]
	BufferI2C[9] = 121; //MAG_OFFSET_Y_LSB
	BufferI2C[10] = 0; //MAG_OFFSET_Y_MSB
	BufferI2C[11] = 158; //MAG_OFFSET_Z_LSB
	BufferI2C[12] = 254; //MAG_OFFSET_Z_MSB
	BufferI2C[13] = 254; //GYR_OFFSET_X_LSB
	BufferI2C[14] = 255; //GYR_OFFSET_X_MSB
 8001bf8:	73a3      	strb	r3, [r4, #14]
	BufferI2C[9] = 121; //MAG_OFFSET_Y_LSB
 8001bfa:	2279      	movs	r2, #121	; 0x79
	BufferI2C[15] = 1; //GYR_OFFSET_Y_LSB
	BufferI2C[16] = 0; //GYR_OFFSET_Y_MSB
	BufferI2C[17] = 1; //GYR_OFFSET_Z_LSB
	BufferI2C[18] = 0; //GYR_OFFSET_Z_MSB
	BufferI2C[19] = 232; //ACC_RADIUS_LSB
 8001bfc:	23e8      	movs	r3, #232	; 0xe8
	BufferI2C[9] = 121; //MAG_OFFSET_Y_LSB
 8001bfe:	7262      	strb	r2, [r4, #9]
	BufferI2C[19] = 232; //ACC_RADIUS_LSB
 8001c00:	74e3      	strb	r3, [r4, #19]
	BufferI2C[11] = 158; //MAG_OFFSET_Z_LSB
 8001c02:	229e      	movs	r2, #158	; 0x9e
	BufferI2C[20] = 3; //ACC_RADIUS_MSB
 8001c04:	2303      	movs	r3, #3
	BufferI2C[3] = 230; //ACC_OFFSET_Y_LSB
 8001c06:	21e6      	movs	r1, #230	; 0xe6
	BufferI2C[11] = 158; //MAG_OFFSET_Z_LSB
 8001c08:	72e2      	strb	r2, [r4, #11]
	BufferI2C[20] = 3; //ACC_RADIUS_MSB
 8001c0a:	7523      	strb	r3, [r4, #20]
	BufferI2C[12] = 254; //MAG_OFFSET_Z_MSB
 8001c0c:	22fe      	movs	r2, #254	; 0xfe
	BufferI2C[21] = 135; //MAG_RADIUS_LSB
 8001c0e:	2387      	movs	r3, #135	; 0x87
	BufferI2C[3] = 230; //ACC_OFFSET_Y_LSB
 8001c10:	70e1      	strb	r1, [r4, #3]
	BufferI2C[12] = 254; //MAG_OFFSET_Z_MSB
 8001c12:	7322      	strb	r2, [r4, #12]
	BufferI2C[13] = 254; //GYR_OFFSET_X_LSB
 8001c14:	7362      	strb	r2, [r4, #13]
	BufferI2C[15] = 1; //GYR_OFFSET_Y_LSB
 8001c16:	73e7      	strb	r7, [r4, #15]
	BufferI2C[17] = 1; //GYR_OFFSET_Z_LSB
 8001c18:	7467      	strb	r7, [r4, #17]
	BufferI2C[21] = 135; //MAG_RADIUS_LSB
 8001c1a:	7563      	strb	r3, [r4, #21]
	BufferI2C[22] = 2; //MAG_RADIUS_MSB
 8001c1c:	2702      	movs	r7, #2
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 23, TIMEOUT);
 8001c1e:	9500      	str	r5, [sp, #0]
 8001c20:	2317      	movs	r3, #23
 8001c22:	4a34      	ldr	r2, [pc, #208]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001c24:	4834      	ldr	r0, [pc, #208]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[8] = 0; //MAG_OFFSET_X_MSB
 8001c26:	7226      	strb	r6, [r4, #8]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 23, TIMEOUT);
 8001c28:	2150      	movs	r1, #80	; 0x50

	//		 setExtCrystalUse
	//		 set 0x80 (bit7) para usar o cristal externo
	//		 set modo de config
	BufferI2C[0] = BNO055_OPR_MODE_ADDR; //endere??o
 8001c2a:	f04f 083d 	mov.w	r8, #61	; 0x3d
	BufferI2C[10] = 0; //MAG_OFFSET_Y_MSB
 8001c2e:	72a6      	strb	r6, [r4, #10]
	BufferI2C[16] = 0; //GYR_OFFSET_Y_MSB
 8001c30:	7426      	strb	r6, [r4, #16]
	BufferI2C[18] = 0; //GYR_OFFSET_Z_MSB
 8001c32:	74a6      	strb	r6, [r4, #18]
	BufferI2C[22] = 2; //MAG_RADIUS_MSB
 8001c34:	75a7      	strb	r7, [r4, #22]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 23, TIMEOUT);
 8001c36:	f7fe ffad 	bl	8000b94 <HAL_I2C_Master_Transmit>
	BufferI2C[1] = BNO055_OPERATION_MODE_CONFIG; //dado
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001c3e:	9500      	str	r5, [sp, #0]
 8001c40:	2150      	movs	r1, #80	; 0x50
 8001c42:	482d      	ldr	r0, [pc, #180]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_OPR_MODE_ADDR; //endere??o
 8001c44:	f884 8000 	strb.w	r8, [r4]
	BufferI2C[1] = BNO055_OPERATION_MODE_CONFIG; //dado
 8001c48:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c4a:	f7fe ffa3 	bl	8000b94 <HAL_I2C_Master_Transmit>

	HAL_Delay(25);
 8001c4e:	2019      	movs	r0, #25
 8001c50:	f7fe fc92 	bl	8000578 <HAL_Delay>

	//Disparar o trigger do self test e setar o oscilador externo, e resetar BNO
	BufferI2C[0] = BNO055_SYS_TRIGGER_ADDR; //endere�o
 8001c54:	233f      	movs	r3, #63	; 0x3f
 8001c56:	7023      	strb	r3, [r4, #0]
	BufferI2C[1] = BNO055_CLK_SRC_MSK; //dado do modo de opera��o
 8001c58:	2380      	movs	r3, #128	; 0x80
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c5a:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <setup_BNO055+0x1e0>)
	BufferI2C[1] = BNO055_CLK_SRC_MSK; //dado do modo de opera��o
 8001c5c:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c5e:	2150      	movs	r1, #80	; 0x50
 8001c60:	463b      	mov	r3, r7
 8001c62:	9500      	str	r5, [sp, #0]
 8001c64:	4824      	ldr	r0, [pc, #144]	; (8001cf8 <setup_BNO055+0x1e4>)
 8001c66:	f7fe ff95 	bl	8000b94 <HAL_I2C_Master_Transmit>

	HAL_Delay(700); // no datasheet diz que demora 650ms
 8001c6a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001c6e:	f7fe fc83 	bl	8000578 <HAL_Delay>

	//Setar o modo de opera��o
	BufferI2C[0] = BNO055_OPR_MODE_ADDR; //endere�o
	BufferI2C[1] = BNO055_OPERATION_MODE_NDOF; //dado do modo de opera��o
 8001c72:	230c      	movs	r3, #12
 8001c74:	7063      	strb	r3, [r4, #1]
	//BufferI2C[1]= BNO055_OPERATION_MODE_NDOF_FMC_OFF;//dado do modo de opera��o
	//BufferI2C[1]= BNO055_OPERATION_MODE_AMG;//dado do modo de opera��o liga os 3 sensores
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c76:	9500      	str	r5, [sp, #0]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <setup_BNO055+0x1e0>)
 8001c7c:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_OPR_MODE_ADDR; //endere�o
 8001c7e:	f884 8000 	strb.w	r8, [r4]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 2, TIMEOUT);
 8001c82:	2150      	movs	r1, #80	; 0x50
 8001c84:	f7fe ff86 	bl	8000b94 <HAL_I2C_Master_Transmit>

	HAL_Delay(20); // ap�s mudar para um modo de op demora 7ms conforme o datasheeth
 8001c88:	4628      	mov	r0, r5
	BufferI2C[0] = BNO055_CALIB_STAT_ADDR; //Endere�o do status da calibra��o
	BufferI2C[1] = 0; // inicialmente n�o calibrado

	while (BufferI2C[1] != 0xFF) //enquanto n�o calibrar os tr�s sensores, fica preso aqui
	{
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001c8a:	4d1a      	ldr	r5, [pc, #104]	; (8001cf4 <setup_BNO055+0x1e0>)
	HAL_Delay(20); // ap�s mudar para um modo de op demora 7ms conforme o datasheeth
 8001c8c:	f7fe fc74 	bl	8000578 <HAL_Delay>
	BufferI2C[0] = BNO055_CALIB_STAT_ADDR; //Endere�o do status da calibra��o
 8001c90:	2335      	movs	r3, #53	; 0x35
	BufferI2C[1] = 0; // inicialmente n�o calibrado
 8001c92:	7066      	strb	r6, [r4, #1]
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001c94:	4e18      	ldr	r6, [pc, #96]	; (8001cf8 <setup_BNO055+0x1e4>)
	BufferI2C[0] = BNO055_CALIB_STAT_ADDR; //Endere�o do status da calibra��o
 8001c96:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &BufferI2C[1], 1, TIMEOUT);
 8001c98:	f105 0801 	add.w	r8, r5, #1
	while (BufferI2C[1] != 0xFF) //enquanto n�o calibrar os tr�s sensores, fica preso aqui
 8001c9c:	7863      	ldrb	r3, [r4, #1]
 8001c9e:	2bff      	cmp	r3, #255	; 0xff
 8001ca0:	d115      	bne.n	8001cce <setup_BNO055+0x1ba>

		HAL_Delay(200);
	}
}
 8001ca2:	b002      	add	sp, #8
 8001ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001ca8:	2614      	movs	r6, #20
 8001caa:	463a      	mov	r2, r7
 8001cac:	9600      	str	r6, [sp, #0]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2150      	movs	r1, #80	; 0x50
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7fe ff6e 	bl	8000b94 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &BufferI2C[1], 1, TIMEOUT);
 8001cb8:	9600      	str	r6, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	2150      	movs	r1, #80	; 0x50
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f7ff f835 	bl	8000d30 <HAL_I2C_Master_Receive>
		HAL_Delay(100);
 8001cc6:	2064      	movs	r0, #100	; 0x64
 8001cc8:	f7fe fc56 	bl	8000578 <HAL_Delay>
 8001ccc:	e755      	b.n	8001b7a <setup_BNO055+0x66>
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001cce:	2714      	movs	r7, #20
 8001cd0:	462a      	mov	r2, r5
 8001cd2:	9700      	str	r7, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	2150      	movs	r1, #80	; 0x50
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f7fe ff5b 	bl	8000b94 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &BufferI2C[1], 1, TIMEOUT);
 8001cde:	9700      	str	r7, [sp, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	4642      	mov	r2, r8
 8001ce4:	2150      	movs	r1, #80	; 0x50
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7ff f822 	bl	8000d30 <HAL_I2C_Master_Receive>
		HAL_Delay(200);
 8001cec:	20c8      	movs	r0, #200	; 0xc8
 8001cee:	f7fe fc43 	bl	8000578 <HAL_Delay>
 8001cf2:	e7d3      	b.n	8001c9c <setup_BNO055+0x188>
 8001cf4:	2000002e 	.word	0x2000002e
 8001cf8:	20000060 	.word	0x20000060

08001cfc <main>:
{
 8001cfc:	b500      	push	{lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d00:	2400      	movs	r4, #0
  HAL_Init();
 8001d02:	f7fe fc0d 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001d06:	f7ff fe77 	bl	80019f8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <main+0xac>)
 8001d0c:	9400      	str	r4, [sp, #0]
 8001d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8001d10:	4826      	ldr	r0, [pc, #152]	; (8001dac <main+0xb0>)
  htim2.Instance = TIM2;
 8001d12:	4d27      	ldr	r5, [pc, #156]	; (8001db0 <main+0xb4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	9401      	str	r4, [sp, #4]
 8001d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d28:	f042 0202 	orr.w	r2, r2, #2
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hi2c1.Init.ClockSpeed = 400000;
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <main+0xb8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d32:	6084      	str	r4, [r0, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	9b01      	ldr	r3, [sp, #4]
  hi2c1.Init.ClockSpeed = 400000;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <main+0xbc>)
  hi2c1.Init.OwnAddress1 = 0;
 8001d3e:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.ClockSpeed = 400000;
 8001d40:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d48:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d4a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4c:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4e:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d50:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d52:	f7fe fe7b 	bl	8000a4c <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	2210      	movs	r2, #16
 8001d58:	eb0d 0002 	add.w	r0, sp, r2
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	f000 f9e5 	bl	800212c <memset>
  htim2.Init.Prescaler = 84;
 8001d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d66:	2354      	movs	r3, #84	; 0x54
 8001d68:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d6c:	4628      	mov	r0, r5
  htim2.Init.Period = 10000;
 8001d6e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d72:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	9402      	str	r4, [sp, #8]
 8001d76:	9403      	str	r4, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7e:	f7ff fd63 	bl	8001848 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d86:	a904      	add	r1, sp, #16
 8001d88:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f7ff fd80 	bl	8001890 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d90:	a902      	add	r1, sp, #8
 8001d92:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d98:	f7ff fe0e 	bl	80019b8 <HAL_TIMEx_MasterConfigSynchronization>
  setup_BNO055();
 8001d9c:	f7ff feba 	bl	8001b14 <setup_BNO055>
  HAL_TIM_Base_Start_IT(&htim2);
 8001da0:	4628      	mov	r0, r5
 8001da2:	f7ff fc35 	bl	8001610 <HAL_TIM_Base_Start_IT>
 8001da6:	e7fe      	b.n	8001da6 <main+0xaa>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	20000060 	.word	0x20000060
 8001db0:	200000d0 	.word	0x200000d0
 8001db4:	40005400 	.word	0x40005400
 8001db8:	00061a80 	.word	0x00061a80

08001dbc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
 8001dbc:	6803      	ldr	r3, [r0, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001dc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8001dc4:	f040 8091 	bne.w	8001eea <HAL_TIM_PeriodElapsedCallback+0x12e>
		//Leitura simultanea dos 44 elementos na sequencia;
		BufferI2C[0] = BNO055_ACCEL_DATA_X_LSB_ADDR;
 8001dc8:	4c49      	ldr	r4, [pc, #292]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x134>)

		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001dca:	484a      	ldr	r0, [pc, #296]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
		BufferI2C[0] = BNO055_ACCEL_DATA_X_LSB_ADDR;
 8001dcc:	2308      	movs	r3, #8
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001dce:	2514      	movs	r5, #20
		BufferI2C[0] = BNO055_ACCEL_DATA_X_LSB_ADDR;
 8001dd0:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR1 << 1, BufferI2C, 1, TIMEOUT);
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	2150      	movs	r1, #80	; 0x50
 8001dd8:	9500      	str	r5, [sp, #0]
 8001dda:	f7fe fedb 	bl	8000b94 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR1 << 1, &BufferI2C[1], 44, TIMEOUT);
 8001dde:	232c      	movs	r3, #44	; 0x2c
 8001de0:	1c62      	adds	r2, r4, #1
 8001de2:	9500      	str	r5, [sp, #0]
 8001de4:	2150      	movs	r1, #80	; 0x50
 8001de6:	4843      	ldr	r0, [pc, #268]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001de8:	f7fe ffa2 	bl	8000d30 <HAL_I2C_Master_Receive>

		ax = (BufferI2C[1] | BufferI2C[2] << 8);
 8001dec:	78a2      	ldrb	r2, [r4, #2]
 8001dee:	7863      	ldrb	r3, [r4, #1]
 8001df0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001df4:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001df6:	8013      	strh	r3, [r2, #0]
		ay = (BufferI2C[3] | BufferI2C[4] << 8);
 8001df8:	7922      	ldrb	r2, [r4, #4]
 8001dfa:	78e3      	ldrb	r3, [r4, #3]
 8001dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e00:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e02:	8013      	strh	r3, [r2, #0]
		az = (BufferI2C[5] | BufferI2C[6] << 8);
 8001e04:	79a2      	ldrb	r2, [r4, #6]
 8001e06:	7963      	ldrb	r3, [r4, #5]
 8001e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e0e:	8013      	strh	r3, [r2, #0]
		mx = (BufferI2C[7] | BufferI2C[8] << 8);
 8001e10:	7a22      	ldrb	r2, [r4, #8]
 8001e12:	79e3      	ldrb	r3, [r4, #7]
 8001e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e18:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e1a:	8013      	strh	r3, [r2, #0]
		my = (BufferI2C[9] | BufferI2C[10] << 8);
 8001e1c:	7aa2      	ldrb	r2, [r4, #10]
 8001e1e:	7a63      	ldrb	r3, [r4, #9]
 8001e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e24:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e26:	8013      	strh	r3, [r2, #0]
		mz = (BufferI2C[11] | BufferI2C[12] << 8);
 8001e28:	7b22      	ldrb	r2, [r4, #12]
 8001e2a:	7ae3      	ldrb	r3, [r4, #11]
 8001e2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e32:	8013      	strh	r3, [r2, #0]
		wx = (BufferI2C[13] | BufferI2C[14] << 8);
 8001e34:	7ba2      	ldrb	r2, [r4, #14]
 8001e36:	7b63      	ldrb	r3, [r4, #13]
 8001e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e3c:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e3e:	8013      	strh	r3, [r2, #0]
		wy = (BufferI2C[15] | BufferI2C[16] << 8);
 8001e40:	7c22      	ldrb	r2, [r4, #16]
 8001e42:	7be3      	ldrb	r3, [r4, #15]
 8001e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e4a:	8013      	strh	r3, [r2, #0]
		wz = (BufferI2C[17] | BufferI2C[18] << 8);
 8001e4c:	7ca2      	ldrb	r2, [r4, #18]
 8001e4e:	7c63      	ldrb	r3, [r4, #17]
 8001e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e54:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e56:	8013      	strh	r3, [r2, #0]
		qw = (BufferI2C[25] | BufferI2C[26] << 8);
 8001e58:	7ea2      	ldrb	r2, [r4, #26]
 8001e5a:	7e63      	ldrb	r3, [r4, #25]
 8001e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e60:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e62:	8013      	strh	r3, [r2, #0]
		qx = (BufferI2C[27] | BufferI2C[28] << 8);
 8001e64:	7f22      	ldrb	r2, [r4, #28]
 8001e66:	7ee3      	ldrb	r3, [r4, #27]
 8001e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e6e:	8013      	strh	r3, [r2, #0]
		qy = (BufferI2C[29] | BufferI2C[30] << 8);
 8001e70:	7fa2      	ldrb	r2, [r4, #30]
 8001e72:	7f63      	ldrb	r3, [r4, #29]
 8001e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e7a:	8013      	strh	r3, [r2, #0]
		qz = (BufferI2C[31] | BufferI2C[32] << 8);
 8001e7c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001e80:	7fe3      	ldrb	r3, [r4, #31]
 8001e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e86:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e88:	8013      	strh	r3, [r2, #0]
		alx = (BufferI2C[33] | BufferI2C[34] << 8);
 8001e8a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001e8e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e98:	8013      	strh	r3, [r2, #0]
		aly = (BufferI2C[35] | BufferI2C[36] << 8);
 8001e9a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001e9e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ea8:	8013      	strh	r3, [r2, #0]
		alz = (BufferI2C[37] | BufferI2C[38] << 8);
 8001eaa:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8001eae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001eb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001eb8:	8013      	strh	r3, [r2, #0]
		gx = (BufferI2C[39] | BufferI2C[40] << 8);
 8001eba:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001ebe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8001ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001ec8:	8013      	strh	r3, [r2, #0]
		gy = (BufferI2C[41] | BufferI2C[42] << 8);
 8001eca:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001ece:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8001ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001ed8:	8013      	strh	r3, [r2, #0]
		gz = (BufferI2C[43] | BufferI2C[44] << 8);
 8001eda:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8001ede:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8001ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ee8:	8013      	strh	r3, [r2, #0]
	}
}
 8001eea:	b003      	add	sp, #12
 8001eec:	bd30      	pop	{r4, r5, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000002e 	.word	0x2000002e
 8001ef4:	20000060 	.word	0x20000060
 8001ef8:	200000c0 	.word	0x200000c0
 8001efc:	20000116 	.word	0x20000116
 8001f00:	200000bc 	.word	0x200000bc
 8001f04:	20000118 	.word	0x20000118
 8001f08:	200000be 	.word	0x200000be
 8001f0c:	200000cc 	.word	0x200000cc
 8001f10:	200000b8 	.word	0x200000b8
 8001f14:	20000110 	.word	0x20000110
 8001f18:	2000002c 	.word	0x2000002c
 8001f1c:	200000b6 	.word	0x200000b6
 8001f20:	200000c6 	.word	0x200000c6
 8001f24:	20000114 	.word	0x20000114
 8001f28:	200000c4 	.word	0x200000c4
 8001f2c:	200000ca 	.word	0x200000ca
 8001f30:	200000b4 	.word	0x200000b4
 8001f34:	200000c2 	.word	0x200000c2
 8001f38:	20000112 	.word	0x20000112
 8001f3c:	200000ba 	.word	0x200000ba
 8001f40:	200000c8 	.word	0x200000c8

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_MspInit+0x34>)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	9100      	str	r1, [sp, #0]
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
 8001f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f56:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	9101      	str	r1, [sp, #4]
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	b002      	add	sp, #8
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f7c:	b530      	push	{r4, r5, lr}
 8001f7e:	4604      	mov	r4, r0
 8001f80:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	2214      	movs	r2, #20
 8001f84:	2100      	movs	r1, #0
 8001f86:	a803      	add	r0, sp, #12
 8001f88:	f000 f8d0 	bl	800212c <memset>
  if(hi2c->Instance==I2C1)
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_I2C_MspInit+0x64>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d123      	bne.n	8001fdc <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	4c13      	ldr	r4, [pc, #76]	; (8001fe4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	2500      	movs	r5, #0
 8001f9a:	9501      	str	r5, [sp, #4]
 8001f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8001fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f7fe fb56 	bl	8000674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	9502      	str	r5, [sp, #8]
 8001fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd0:	6423      	str	r3, [r4, #64]	; 0x40
 8001fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fdc:	b009      	add	sp, #36	; 0x24
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020400 	.word	0x40020400

08001fec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001fec:	6803      	ldr	r3, [r0, #0]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001ff2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001ff4:	d113      	bne.n	800201e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002000:	f041 0101 	orr.w	r1, r1, #1
 8002004:	6419      	str	r1, [r3, #64]	; 0x40
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800200e:	201c      	movs	r0, #28
 8002010:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002014:	f7fe fad6 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002018:	201c      	movs	r0, #28
 800201a:	f7fe fb07 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800201e:	b003      	add	sp, #12
 8002020:	f85d fb04 	ldr.w	pc, [sp], #4

08002024 <NMI_Handler>:
 8002024:	4770      	bx	lr

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	e7fe      	b.n	8002026 <HardFault_Handler>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	e7fe      	b.n	8002028 <MemManage_Handler>

0800202a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202a:	e7fe      	b.n	800202a <BusFault_Handler>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler>

0800202e <SVC_Handler>:
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	4770      	bx	lr

08002034 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f7fe ba8e 	b.w	8000554 <HAL_IncTick>

08002038 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <TIM2_IRQHandler+0x8>)
 800203a:	f7ff bafd 	b.w	8001638 <HAL_TIM_IRQHandler>
 800203e:	bf00      	nop
 8002040:	200000d0 	.word	0x200000d0

08002044 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002044:	490f      	ldr	r1, [pc, #60]	; (8002084 <SystemInit+0x40>)
 8002046:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800204a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <SystemInit+0x44>)
 8002054:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002056:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800205e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002066:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800206a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <SystemInit+0x48>)
 800206e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002076:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002078:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00
 8002088:	40023800 	.word	0x40023800
 800208c:	24003010 	.word	0x24003010

08002090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002096:	e003      	b.n	80020a0 <LoopCopyDataInit>

08002098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800209a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800209c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800209e:	3104      	adds	r1, #4

080020a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020a8:	d3f6      	bcc.n	8002098 <CopyDataInit>
  ldr  r2, =_sbss
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020ac:	e002      	b.n	80020b4 <LoopFillZerobss>

080020ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020b0:	f842 3b04 	str.w	r3, [r2], #4

080020b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020b8:	d3f9      	bcc.n	80020ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ba:	f7ff ffc3 	bl	8002044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f000 f811 	bl	80020e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c2:	f7ff fe1b 	bl	8001cfc <main>
  bx  lr    
 80020c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020cc:	0800217c 	.word	0x0800217c
  ldr  r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020d4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80020d8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80020dc:	2000011c 	.word	0x2000011c

080020e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <__libc_init_array>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4e0d      	ldr	r6, [pc, #52]	; (800211c <__libc_init_array+0x38>)
 80020e8:	4c0d      	ldr	r4, [pc, #52]	; (8002120 <__libc_init_array+0x3c>)
 80020ea:	1ba4      	subs	r4, r4, r6
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	2500      	movs	r5, #0
 80020f0:	42a5      	cmp	r5, r4
 80020f2:	d109      	bne.n	8002108 <__libc_init_array+0x24>
 80020f4:	4e0b      	ldr	r6, [pc, #44]	; (8002124 <__libc_init_array+0x40>)
 80020f6:	4c0c      	ldr	r4, [pc, #48]	; (8002128 <__libc_init_array+0x44>)
 80020f8:	f000 f820 	bl	800213c <_init>
 80020fc:	1ba4      	subs	r4, r4, r6
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	2500      	movs	r5, #0
 8002102:	42a5      	cmp	r5, r4
 8002104:	d105      	bne.n	8002112 <__libc_init_array+0x2e>
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800210c:	4798      	blx	r3
 800210e:	3501      	adds	r5, #1
 8002110:	e7ee      	b.n	80020f0 <__libc_init_array+0xc>
 8002112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002116:	4798      	blx	r3
 8002118:	3501      	adds	r5, #1
 800211a:	e7f2      	b.n	8002102 <__libc_init_array+0x1e>
 800211c:	08002174 	.word	0x08002174
 8002120:	08002174 	.word	0x08002174
 8002124:	08002174 	.word	0x08002174
 8002128:	08002178 	.word	0x08002178

0800212c <memset>:
 800212c:	4402      	add	r2, r0
 800212e:	4603      	mov	r3, r0
 8002130:	4293      	cmp	r3, r2
 8002132:	d100      	bne.n	8002136 <memset+0xa>
 8002134:	4770      	bx	lr
 8002136:	f803 1b01 	strb.w	r1, [r3], #1
 800213a:	e7f9      	b.n	8002130 <memset+0x4>

0800213c <_init>:
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	bf00      	nop
 8002140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002142:	bc08      	pop	{r3}
 8002144:	469e      	mov	lr, r3
 8002146:	4770      	bx	lr

08002148 <_fini>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	bf00      	nop
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr
